// Copyright 2017-25 the original author or authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

package protobuf;

option go_package = "m4o.io/pbf/protobuf";

/* OSM Binary file format

This is the master schema file of the OSM binary file format. This
file is designed to support limited random-access and future
extendability.

A binary OSM file consists of a sequence of FileBlocks (please see
fileformat.proto). The first fileblock contains a serialized instance
of HeaderBlock, followed by a sequence of PrimitiveBlock blocks that
contain the primitives.

Each primitiveblock is designed to be independently parsable. It
contains a string table storing all strings in that block (keys and
values in tags, roles in relations, usernames, etc.) as well as
metadata containing the precision of coordinates or timestamps in that
block.

A primitiveblock contains a sequence of primitive groups, each
containing primitives of the same type (nodes, densenodes, ways,
relations). Coordinates are stored in signed 64-bit integers. Lat&lon
are measured in units <granularity> nanodegrees. The default of
granularity of 100 nanodegrees corresponds to about 1cm on the ground,
and a full lat or lon fits into 32 bits.

Converting an integer to a lattitude or longitude uses the formula:
$OUT = IN * granularity / 10**9$. Many encoding schemes use delta
coding when representing nodes and relations.

*/

message BlobHeader
{
    // type contains the type of data in this block message
    required string type = 1;

    // indexdata is some arbitrary blob that may include metadata about the
    // following blob, (e.g., for OSM data, it might contain a bounding box.)
    // This is a stub intended to enable the future design of indexed *.osm.pbf
    // files.
    optional bytes indexdata = 2;

    // datasize contains the serialized size of the subsequent Blob message.
    required int32 datasize = 3;
}

message Blob
{
    optional int32 raw_size = 2; // When compressed, the uncompressed size

    oneof data {
        bytes raw = 1; // No compression

        // Possible compressed versions of the data.
        bytes zlib_data = 3;

        // For LZMA compressed data (optional)
        bytes lzma_data = 4;

        // Formerly used for bzip2 compressed data. Deprecated in 2010.
        bytes OBSOLETE_bzip2_data = 5 [deprecated=true]; // Don't reuse this tag number.

        // For LZ4 compressed data (optional)
        bytes lz4_data = 6;

        // For ZSTD compressed data (optional)
        bytes zstd_data = 7;
    }
}

message HeaderBlock {
    optional HeaderBBox bbox = 1;
    /* Additional tags to aid in parsing this dataset */
    repeated string required_features = 4;
    repeated string optional_features = 5;

    optional string writingprogram = 16;
    optional string source = 17; // From the bbox field.

    /* Tags that allow continuing an Osmosis replication */

    // replication timestamp, expressed in seconds since the epoch,
    // otherwise the same value as in the "timestamp=..." field
    // in the state.txt file used by Osmosis
    optional int64 osmosis_replication_timestamp = 32;

    // replication sequence number (sequenceNumber in state.txt)
    optional int64 osmosis_replication_sequence_number = 33;

    // replication base URL (from Osmosis' configuration.txt file)
    optional string osmosis_replication_base_url = 34;
}

message HeaderBBox
{
    required sint64 left = 1;
    required sint64 right = 2;
    required sint64 top = 3;
    required sint64 bottom = 4;
}

message StringTable
{
    repeated string s = 1;
}

message PrimitiveBlock
{
    required StringTable stringtable = 1;
    repeated PrimitiveGroup primitivegroup = 2;

    // Granularity, units of nanodegrees, used to store coordinates in this block
    optional int32 granularity = 17 [default=100];

    // Offset value between the output coordinates coordinates and the granularity grid, in units of nanodegrees.
    optional int64 lat_offset = 19 [default=0];
    optional int64 lon_offset = 20 [default=0];

    // Granularity of dates, normally represented in units of milliseconds since the 1970 epoch.
    optional int32 date_granularity = 18 [default=1000];


    // Proposed extension:
    //optional BBox bbox = XX;
}

message PrimitiveGroup
{
    repeated Node     nodes = 1;
    optional DenseNodes dense = 2;
    repeated Way      ways = 3;
    repeated Relation relations = 4;
    //  repeated ChangeSet changesets = 5;
}

message Info
{
    optional int32 version = 1 [default = -1];
    optional int32 timestamp = 2;
    optional int64 changeset = 3;
    optional int32 uid = 4;
    optional int32 user_sid = 5; // String IDs

    // The visible flag is used to store history information. It indicates that
    // the current object version has been created by a delete operation on the
    // OSM API.
    // When a writer sets this flag, it MUST add a required_features tag with
    // value "HistoricalInformation" to the HeaderBlock.
    // If this flag is not available for some object it MUST be assumed to be
    // true if the file has the required_features tag "HistoricalInformation"
    // set.
    optional bool visible = 6;
}

message Node
{
    required sint64 id = 1;
    required sint64 lat = 7;
    required sint64 lon = 8;
    repeated uint32 keys = 9 [packed = true]; // Denote strings
    repeated uint32 vals = 10 [packed = true];// Denote strings
    optional Info info = 11; // Contains metadata
}

message DenseNodes
{
    repeated sint64 id = 1 [packed = true]; // DELTA coded

    //repeated Info info = 4;
    optional DenseInfo denseinfo = 5;

    repeated sint64 lat = 8 [packed = true]; // DELTA coded
    repeated sint64 lon = 9 [packed = true]; // DELTA coded

    // Special packing of keys and vals into one array. May be empty if all nodes in this block are tagless.
    repeated int32 keys_vals = 10 [packed = true];
}

message DenseInfo
{
    repeated int32 version = 1 [packed = true];
    repeated sint64 timestamp = 2 [packed = true]; // DELTA coded
    repeated sint64 changeset = 3 [packed = true]; // DELTA coded
    repeated sint32 uid = 4 [packed = true]; // DELTA coded
    repeated sint32 user_sid = 5 [packed = true]; // String IDs for usernames. DELTA coded

    // The visible flag is used to store history information. It indicates that
    // the current object version has been created by a delete operation on the
    // OSM API.
    // When a writer sets this flag, it MUST add a required_features tag with
    // value "HistoricalInformation" to the HeaderBlock.
    // If this flag is not available for some object it MUST be assumed to be
    // true if the file has the required_features tag "HistoricalInformation"
    // set.
    repeated bool visible = 6 [packed = true];
}

message Way
{
    required int64 id = 1;
    // Parallel arrays.
    repeated uint32 keys = 2 [packed = true];
    repeated uint32 vals = 3 [packed = true];

    optional Info info = 4;

    repeated sint64 refs = 8 [packed = true];  // DELTA coded

    // The following two fields are optional. They are only used in a special
    // format where node locations are also added to the ways. This makes the
    // files larger, but allows creating way geometries directly.
    //
    // If this is used, you MUST set the optional_features tag "LocationsOnWays"
    // and the number of values in refs, lat, and lon MUST be the same.
    repeated sint64 lat = 9 [packed = true]; // DELTA coded, optional
    repeated sint64 lon = 10 [packed = true]; // DELTA coded, optional
}

message Relation
{
    enum MemberType
    {
        NODE = 0;
        WAY = 1;
        RELATION = 2;
    }
    required int64 id = 1;

    // Parallel arrays.
    repeated uint32 keys = 2 [packed = true];
    repeated uint32 vals = 3 [packed = true];

    optional Info info = 4;

    // Parallel arrays
    repeated int32 roles_sid = 8 [packed = true];
    repeated sint64 memids = 9 [packed = true]; // DELTA encoded
    repeated MemberType types = 10 [packed = true];
}

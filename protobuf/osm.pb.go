// Copyright 2017-25 the original author or authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.3
// source: protobuf/osm.proto

package protobuf

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Relation_MemberType int32

const (
	Relation_NODE     Relation_MemberType = 0
	Relation_WAY      Relation_MemberType = 1
	Relation_RELATION Relation_MemberType = 2
)

// Enum value maps for Relation_MemberType.
var (
	Relation_MemberType_name = map[int32]string{
		0: "NODE",
		1: "WAY",
		2: "RELATION",
	}
	Relation_MemberType_value = map[string]int32{
		"NODE":     0,
		"WAY":      1,
		"RELATION": 2,
	}
)

func (x Relation_MemberType) Enum() *Relation_MemberType {
	p := new(Relation_MemberType)
	*p = x
	return p
}

func (x Relation_MemberType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Relation_MemberType) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_osm_proto_enumTypes[0].Descriptor()
}

func (Relation_MemberType) Type() protoreflect.EnumType {
	return &file_protobuf_osm_proto_enumTypes[0]
}

func (x Relation_MemberType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Relation_MemberType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Relation_MemberType(num)
	return nil
}

// Deprecated: Use Relation_MemberType.Descriptor instead.
func (Relation_MemberType) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_osm_proto_rawDescGZIP(), []int{12, 0}
}

type BlobHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type contains the type of data in this block message
	Type *string `protobuf:"bytes,1,req,name=type" json:"type,omitempty"`
	// indexdata is some arbitrary blob that may include metadata about the
	// following blob, (e.g., for OSM data, it might contain a bounding box.)
	// This is a stub intended to enable the future design of indexed *.osm.pbf
	// files.
	Indexdata []byte `protobuf:"bytes,2,opt,name=indexdata" json:"indexdata,omitempty"`
	// datasize contains the serialized size of the subsequent Blob message.
	Datasize *int32 `protobuf:"varint,3,req,name=datasize" json:"datasize,omitempty"`
}

func (x *BlobHeader) Reset() {
	*x = BlobHeader{}
	mi := &file_protobuf_osm_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlobHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobHeader) ProtoMessage() {}

func (x *BlobHeader) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_osm_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobHeader.ProtoReflect.Descriptor instead.
func (*BlobHeader) Descriptor() ([]byte, []int) {
	return file_protobuf_osm_proto_rawDescGZIP(), []int{0}
}

func (x *BlobHeader) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *BlobHeader) GetIndexdata() []byte {
	if x != nil {
		return x.Indexdata
	}
	return nil
}

func (x *BlobHeader) GetDatasize() int32 {
	if x != nil && x.Datasize != nil {
		return *x.Datasize
	}
	return 0
}

type Blob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Raw               []byte `protobuf:"bytes,1,opt,name=raw" json:"raw,omitempty"`                         // No compression
	RawSize           *int32 `protobuf:"varint,2,opt,name=raw_size,json=rawSize" json:"raw_size,omitempty"` // Only set when compressed, to the uncompressed size
	ZlibData          []byte `protobuf:"bytes,3,opt,name=zlib_data,json=zlibData" json:"zlib_data,omitempty"`
	LzmaData          []byte `protobuf:"bytes,4,opt,name=lzma_data,json=lzmaData" json:"lzma_data,omitempty"`                              // PROPOSED.
	OBSOLETEBzip2Data []byte `protobuf:"bytes,5,opt,name=OBSOLETE_bzip2_data,json=OBSOLETEBzip2Data" json:"OBSOLETE_bzip2_data,omitempty"` // Deprecated.
}

func (x *Blob) Reset() {
	*x = Blob{}
	mi := &file_protobuf_osm_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Blob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Blob) ProtoMessage() {}

func (x *Blob) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_osm_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Blob.ProtoReflect.Descriptor instead.
func (*Blob) Descriptor() ([]byte, []int) {
	return file_protobuf_osm_proto_rawDescGZIP(), []int{1}
}

func (x *Blob) GetRaw() []byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

func (x *Blob) GetRawSize() int32 {
	if x != nil && x.RawSize != nil {
		return *x.RawSize
	}
	return 0
}

func (x *Blob) GetZlibData() []byte {
	if x != nil {
		return x.ZlibData
	}
	return nil
}

func (x *Blob) GetLzmaData() []byte {
	if x != nil {
		return x.LzmaData
	}
	return nil
}

func (x *Blob) GetOBSOLETEBzip2Data() []byte {
	if x != nil {
		return x.OBSOLETEBzip2Data
	}
	return nil
}

type HeaderBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bbox *HeaderBBox `protobuf:"bytes,1,opt,name=bbox" json:"bbox,omitempty"`
	// Additional tags to aid in parsing this dataset
	RequiredFeatures []string `protobuf:"bytes,4,rep,name=required_features,json=requiredFeatures" json:"required_features,omitempty"`
	OptionalFeatures []string `protobuf:"bytes,5,rep,name=optional_features,json=optionalFeatures" json:"optional_features,omitempty"`
	Writingprogram   *string  `protobuf:"bytes,16,opt,name=writingprogram" json:"writingprogram,omitempty"`
	Source           *string  `protobuf:"bytes,17,opt,name=source" json:"source,omitempty"` // From the bbox field.
	// replication timestamp, expressed in seconds since the epoch,
	// otherwise the same value as in the "timestamp=..." field
	// in the state.txt file used by Osmosis
	OsmosisReplicationTimestamp *int64 `protobuf:"varint,32,opt,name=osmosis_replication_timestamp,json=osmosisReplicationTimestamp" json:"osmosis_replication_timestamp,omitempty"`
	// replication sequence number (sequenceNumber in state.txt)
	OsmosisReplicationSequenceNumber *int64 `protobuf:"varint,33,opt,name=osmosis_replication_sequence_number,json=osmosisReplicationSequenceNumber" json:"osmosis_replication_sequence_number,omitempty"`
	// replication base URL (from Osmosis' configuration.txt file)
	OsmosisReplicationBaseUrl *string `protobuf:"bytes,34,opt,name=osmosis_replication_base_url,json=osmosisReplicationBaseUrl" json:"osmosis_replication_base_url,omitempty"`
}

func (x *HeaderBlock) Reset() {
	*x = HeaderBlock{}
	mi := &file_protobuf_osm_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeaderBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderBlock) ProtoMessage() {}

func (x *HeaderBlock) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_osm_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderBlock.ProtoReflect.Descriptor instead.
func (*HeaderBlock) Descriptor() ([]byte, []int) {
	return file_protobuf_osm_proto_rawDescGZIP(), []int{2}
}

func (x *HeaderBlock) GetBbox() *HeaderBBox {
	if x != nil {
		return x.Bbox
	}
	return nil
}

func (x *HeaderBlock) GetRequiredFeatures() []string {
	if x != nil {
		return x.RequiredFeatures
	}
	return nil
}

func (x *HeaderBlock) GetOptionalFeatures() []string {
	if x != nil {
		return x.OptionalFeatures
	}
	return nil
}

func (x *HeaderBlock) GetWritingprogram() string {
	if x != nil && x.Writingprogram != nil {
		return *x.Writingprogram
	}
	return ""
}

func (x *HeaderBlock) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *HeaderBlock) GetOsmosisReplicationTimestamp() int64 {
	if x != nil && x.OsmosisReplicationTimestamp != nil {
		return *x.OsmosisReplicationTimestamp
	}
	return 0
}

func (x *HeaderBlock) GetOsmosisReplicationSequenceNumber() int64 {
	if x != nil && x.OsmosisReplicationSequenceNumber != nil {
		return *x.OsmosisReplicationSequenceNumber
	}
	return 0
}

func (x *HeaderBlock) GetOsmosisReplicationBaseUrl() string {
	if x != nil && x.OsmosisReplicationBaseUrl != nil {
		return *x.OsmosisReplicationBaseUrl
	}
	return ""
}

type HeaderBBox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Left   *int64 `protobuf:"zigzag64,1,req,name=left" json:"left,omitempty"`
	Right  *int64 `protobuf:"zigzag64,2,req,name=right" json:"right,omitempty"`
	Top    *int64 `protobuf:"zigzag64,3,req,name=top" json:"top,omitempty"`
	Bottom *int64 `protobuf:"zigzag64,4,req,name=bottom" json:"bottom,omitempty"`
}

func (x *HeaderBBox) Reset() {
	*x = HeaderBBox{}
	mi := &file_protobuf_osm_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeaderBBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderBBox) ProtoMessage() {}

func (x *HeaderBBox) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_osm_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderBBox.ProtoReflect.Descriptor instead.
func (*HeaderBBox) Descriptor() ([]byte, []int) {
	return file_protobuf_osm_proto_rawDescGZIP(), []int{3}
}

func (x *HeaderBBox) GetLeft() int64 {
	if x != nil && x.Left != nil {
		return *x.Left
	}
	return 0
}

func (x *HeaderBBox) GetRight() int64 {
	if x != nil && x.Right != nil {
		return *x.Right
	}
	return 0
}

func (x *HeaderBBox) GetTop() int64 {
	if x != nil && x.Top != nil {
		return *x.Top
	}
	return 0
}

func (x *HeaderBBox) GetBottom() int64 {
	if x != nil && x.Bottom != nil {
		return *x.Bottom
	}
	return 0
}

type StringTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	S []string `protobuf:"bytes,1,rep,name=s" json:"s,omitempty"`
}

func (x *StringTable) Reset() {
	*x = StringTable{}
	mi := &file_protobuf_osm_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringTable) ProtoMessage() {}

func (x *StringTable) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_osm_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringTable.ProtoReflect.Descriptor instead.
func (*StringTable) Descriptor() ([]byte, []int) {
	return file_protobuf_osm_proto_rawDescGZIP(), []int{4}
}

func (x *StringTable) GetS() []string {
	if x != nil {
		return x.S
	}
	return nil
}

type PrimitiveBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stringtable    *StringTable      `protobuf:"bytes,1,req,name=stringtable" json:"stringtable,omitempty"`
	Primitivegroup []*PrimitiveGroup `protobuf:"bytes,2,rep,name=primitivegroup" json:"primitivegroup,omitempty"`
	// Granularity, units of nanodegrees, used to store coordinates in this block
	Granularity *int32 `protobuf:"varint,17,opt,name=granularity,def=100" json:"granularity,omitempty"`
	// Offset value between the output coordinates coordinates and the granularity grid, in units of nanodegrees.
	LatOffset *int64 `protobuf:"varint,19,opt,name=lat_offset,json=latOffset,def=0" json:"lat_offset,omitempty"`
	LonOffset *int64 `protobuf:"varint,20,opt,name=lon_offset,json=lonOffset,def=0" json:"lon_offset,omitempty"`
	// Granularity of dates, normally represented in units of milliseconds since the 1970 epoch.
	DateGranularity *int32 `protobuf:"varint,18,opt,name=date_granularity,json=dateGranularity,def=1000" json:"date_granularity,omitempty"`
}

// Default values for PrimitiveBlock fields.
const (
	Default_PrimitiveBlock_Granularity     = int32(100)
	Default_PrimitiveBlock_LatOffset       = int64(0)
	Default_PrimitiveBlock_LonOffset       = int64(0)
	Default_PrimitiveBlock_DateGranularity = int32(1000)
)

func (x *PrimitiveBlock) Reset() {
	*x = PrimitiveBlock{}
	mi := &file_protobuf_osm_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrimitiveBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimitiveBlock) ProtoMessage() {}

func (x *PrimitiveBlock) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_osm_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimitiveBlock.ProtoReflect.Descriptor instead.
func (*PrimitiveBlock) Descriptor() ([]byte, []int) {
	return file_protobuf_osm_proto_rawDescGZIP(), []int{5}
}

func (x *PrimitiveBlock) GetStringtable() *StringTable {
	if x != nil {
		return x.Stringtable
	}
	return nil
}

func (x *PrimitiveBlock) GetPrimitivegroup() []*PrimitiveGroup {
	if x != nil {
		return x.Primitivegroup
	}
	return nil
}

func (x *PrimitiveBlock) GetGranularity() int32 {
	if x != nil && x.Granularity != nil {
		return *x.Granularity
	}
	return Default_PrimitiveBlock_Granularity
}

func (x *PrimitiveBlock) GetLatOffset() int64 {
	if x != nil && x.LatOffset != nil {
		return *x.LatOffset
	}
	return Default_PrimitiveBlock_LatOffset
}

func (x *PrimitiveBlock) GetLonOffset() int64 {
	if x != nil && x.LonOffset != nil {
		return *x.LonOffset
	}
	return Default_PrimitiveBlock_LonOffset
}

func (x *PrimitiveBlock) GetDateGranularity() int32 {
	if x != nil && x.DateGranularity != nil {
		return *x.DateGranularity
	}
	return Default_PrimitiveBlock_DateGranularity
}

type PrimitiveGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes     []*Node     `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
	Dense     *DenseNodes `protobuf:"bytes,2,opt,name=dense" json:"dense,omitempty"`
	Ways      []*Way      `protobuf:"bytes,3,rep,name=ways" json:"ways,omitempty"`
	Relations []*Relation `protobuf:"bytes,4,rep,name=relations" json:"relations,omitempty"` //  repeated ChangeSet changesets = 5;
}

func (x *PrimitiveGroup) Reset() {
	*x = PrimitiveGroup{}
	mi := &file_protobuf_osm_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrimitiveGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimitiveGroup) ProtoMessage() {}

func (x *PrimitiveGroup) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_osm_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimitiveGroup.ProtoReflect.Descriptor instead.
func (*PrimitiveGroup) Descriptor() ([]byte, []int) {
	return file_protobuf_osm_proto_rawDescGZIP(), []int{6}
}

func (x *PrimitiveGroup) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *PrimitiveGroup) GetDense() *DenseNodes {
	if x != nil {
		return x.Dense
	}
	return nil
}

func (x *PrimitiveGroup) GetWays() []*Way {
	if x != nil {
		return x.Ways
	}
	return nil
}

func (x *PrimitiveGroup) GetRelations() []*Relation {
	if x != nil {
		return x.Relations
	}
	return nil
}

type Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   *int32 `protobuf:"varint,1,opt,name=version,def=-1" json:"version,omitempty"`
	Timestamp *int32 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Changeset *int64 `protobuf:"varint,3,opt,name=changeset" json:"changeset,omitempty"`
	Uid       *int32 `protobuf:"varint,4,opt,name=uid" json:"uid,omitempty"`
	UserSid   *int32 `protobuf:"varint,5,opt,name=user_sid,json=userSid" json:"user_sid,omitempty"` // String IDs
	// The visible flag is used to store history information. It indicates that
	// the current object version has been created by a delete operation on the
	// OSM API.
	// When a writer sets this flag, it MUST add a required_features tag with
	// value "HistoricalInformation" to the HeaderBlock.
	// If this flag is not available for some object it MUST be assumed to be
	// true if the file has the required_features tag "HistoricalInformation"
	// set.
	Visible *bool `protobuf:"varint,6,opt,name=visible" json:"visible,omitempty"`
}

// Default values for Info fields.
const (
	Default_Info_Version = int32(-1)
)

func (x *Info) Reset() {
	*x = Info{}
	mi := &file_protobuf_osm_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Info) ProtoMessage() {}

func (x *Info) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_osm_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Info.ProtoReflect.Descriptor instead.
func (*Info) Descriptor() ([]byte, []int) {
	return file_protobuf_osm_proto_rawDescGZIP(), []int{7}
}

func (x *Info) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return Default_Info_Version
}

func (x *Info) GetTimestamp() int32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *Info) GetChangeset() int64 {
	if x != nil && x.Changeset != nil {
		return *x.Changeset
	}
	return 0
}

func (x *Info) GetUid() int32 {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return 0
}

func (x *Info) GetUserSid() int32 {
	if x != nil && x.UserSid != nil {
		return *x.UserSid
	}
	return 0
}

func (x *Info) GetVisible() bool {
	if x != nil && x.Visible != nil {
		return *x.Visible
	}
	return false
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   *int64   `protobuf:"zigzag64,1,req,name=id" json:"id,omitempty"`
	Lat  *int64   `protobuf:"zigzag64,7,req,name=lat" json:"lat,omitempty"`
	Lon  *int64   `protobuf:"zigzag64,8,req,name=lon" json:"lon,omitempty"`
	Keys []uint32 `protobuf:"varint,9,rep,packed,name=keys" json:"keys,omitempty"`  // Denote strings
	Vals []uint32 `protobuf:"varint,10,rep,packed,name=vals" json:"vals,omitempty"` // Denote strings
	Info *Info    `protobuf:"bytes,11,opt,name=info" json:"info,omitempty"`         // Contains metadata
}

func (x *Node) Reset() {
	*x = Node{}
	mi := &file_protobuf_osm_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_osm_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_protobuf_osm_proto_rawDescGZIP(), []int{8}
}

func (x *Node) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Node) GetLat() int64 {
	if x != nil && x.Lat != nil {
		return *x.Lat
	}
	return 0
}

func (x *Node) GetLon() int64 {
	if x != nil && x.Lon != nil {
		return *x.Lon
	}
	return 0
}

func (x *Node) GetKeys() []uint32 {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *Node) GetVals() []uint32 {
	if x != nil {
		return x.Vals
	}
	return nil
}

func (x *Node) GetInfo() *Info {
	if x != nil {
		return x.Info
	}
	return nil
}

type DenseNodes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []int64 `protobuf:"zigzag64,1,rep,packed,name=id" json:"id,omitempty"` // DELTA coded
	// repeated Info info = 4;
	Denseinfo *DenseInfo `protobuf:"bytes,5,opt,name=denseinfo" json:"denseinfo,omitempty"`
	Lat       []int64    `protobuf:"zigzag64,8,rep,packed,name=lat" json:"lat,omitempty"` // DELTA coded
	Lon       []int64    `protobuf:"zigzag64,9,rep,packed,name=lon" json:"lon,omitempty"` // DELTA coded
	// Special packing of keys and vals into one array. May be empty if all nodes in this block are tagless.
	KeysVals []int32 `protobuf:"varint,10,rep,packed,name=keys_vals,json=keysVals" json:"keys_vals,omitempty"`
}

func (x *DenseNodes) Reset() {
	*x = DenseNodes{}
	mi := &file_protobuf_osm_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DenseNodes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DenseNodes) ProtoMessage() {}

func (x *DenseNodes) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_osm_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DenseNodes.ProtoReflect.Descriptor instead.
func (*DenseNodes) Descriptor() ([]byte, []int) {
	return file_protobuf_osm_proto_rawDescGZIP(), []int{9}
}

func (x *DenseNodes) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DenseNodes) GetDenseinfo() *DenseInfo {
	if x != nil {
		return x.Denseinfo
	}
	return nil
}

func (x *DenseNodes) GetLat() []int64 {
	if x != nil {
		return x.Lat
	}
	return nil
}

func (x *DenseNodes) GetLon() []int64 {
	if x != nil {
		return x.Lon
	}
	return nil
}

func (x *DenseNodes) GetKeysVals() []int32 {
	if x != nil {
		return x.KeysVals
	}
	return nil
}

type DenseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   []int32 `protobuf:"varint,1,rep,packed,name=version" json:"version,omitempty"`
	Timestamp []int64 `protobuf:"zigzag64,2,rep,packed,name=timestamp" json:"timestamp,omitempty"`            // DELTA coded
	Changeset []int64 `protobuf:"zigzag64,3,rep,packed,name=changeset" json:"changeset,omitempty"`            // DELTA coded
	Uid       []int32 `protobuf:"zigzag32,4,rep,packed,name=uid" json:"uid,omitempty"`                        // DELTA coded
	UserSid   []int32 `protobuf:"zigzag32,5,rep,packed,name=user_sid,json=userSid" json:"user_sid,omitempty"` // String IDs for usernames. DELTA coded
	// The visible flag is used to store history information. It indicates that
	// the current object version has been created by a delete operation on the
	// OSM API.
	// When a writer sets this flag, it MUST add a required_features tag with
	// value "HistoricalInformation" to the HeaderBlock.
	// If this flag is not available for some object it MUST be assumed to be
	// true if the file has the required_features tag "HistoricalInformation"
	// set.
	Visible []bool `protobuf:"varint,6,rep,packed,name=visible" json:"visible,omitempty"`
}

func (x *DenseInfo) Reset() {
	*x = DenseInfo{}
	mi := &file_protobuf_osm_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DenseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DenseInfo) ProtoMessage() {}

func (x *DenseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_osm_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DenseInfo.ProtoReflect.Descriptor instead.
func (*DenseInfo) Descriptor() ([]byte, []int) {
	return file_protobuf_osm_proto_rawDescGZIP(), []int{10}
}

func (x *DenseInfo) GetVersion() []int32 {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *DenseInfo) GetTimestamp() []int64 {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *DenseInfo) GetChangeset() []int64 {
	if x != nil {
		return x.Changeset
	}
	return nil
}

func (x *DenseInfo) GetUid() []int32 {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *DenseInfo) GetUserSid() []int32 {
	if x != nil {
		return x.UserSid
	}
	return nil
}

func (x *DenseInfo) GetVisible() []bool {
	if x != nil {
		return x.Visible
	}
	return nil
}

type Way struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *int64 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	// Parallel arrays.
	Keys []uint32 `protobuf:"varint,2,rep,packed,name=keys" json:"keys,omitempty"`
	Vals []uint32 `protobuf:"varint,3,rep,packed,name=vals" json:"vals,omitempty"`
	Info *Info    `protobuf:"bytes,4,opt,name=info" json:"info,omitempty"`
	Refs []int64  `protobuf:"zigzag64,8,rep,packed,name=refs" json:"refs,omitempty"` // DELTA coded
}

func (x *Way) Reset() {
	*x = Way{}
	mi := &file_protobuf_osm_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Way) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Way) ProtoMessage() {}

func (x *Way) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_osm_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Way.ProtoReflect.Descriptor instead.
func (*Way) Descriptor() ([]byte, []int) {
	return file_protobuf_osm_proto_rawDescGZIP(), []int{11}
}

func (x *Way) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Way) GetKeys() []uint32 {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *Way) GetVals() []uint32 {
	if x != nil {
		return x.Vals
	}
	return nil
}

func (x *Way) GetInfo() *Info {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *Way) GetRefs() []int64 {
	if x != nil {
		return x.Refs
	}
	return nil
}

type Relation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *int64 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	// Parallel arrays.
	Keys []uint32 `protobuf:"varint,2,rep,packed,name=keys" json:"keys,omitempty"`
	Vals []uint32 `protobuf:"varint,3,rep,packed,name=vals" json:"vals,omitempty"`
	Info *Info    `protobuf:"bytes,4,opt,name=info" json:"info,omitempty"`
	// Parallel arrays
	RolesSid []int32               `protobuf:"varint,8,rep,packed,name=roles_sid,json=rolesSid" json:"roles_sid,omitempty"`
	Memids   []int64               `protobuf:"zigzag64,9,rep,packed,name=memids" json:"memids,omitempty"` // DELTA encoded
	Types    []Relation_MemberType `protobuf:"varint,10,rep,packed,name=types,enum=protobuf.Relation_MemberType" json:"types,omitempty"`
}

func (x *Relation) Reset() {
	*x = Relation{}
	mi := &file_protobuf_osm_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Relation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Relation) ProtoMessage() {}

func (x *Relation) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_osm_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Relation.ProtoReflect.Descriptor instead.
func (*Relation) Descriptor() ([]byte, []int) {
	return file_protobuf_osm_proto_rawDescGZIP(), []int{12}
}

func (x *Relation) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Relation) GetKeys() []uint32 {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *Relation) GetVals() []uint32 {
	if x != nil {
		return x.Vals
	}
	return nil
}

func (x *Relation) GetInfo() *Info {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *Relation) GetRolesSid() []int32 {
	if x != nil {
		return x.RolesSid
	}
	return nil
}

func (x *Relation) GetMemids() []int64 {
	if x != nil {
		return x.Memids
	}
	return nil
}

func (x *Relation) GetTypes() []Relation_MemberType {
	if x != nil {
		return x.Types
	}
	return nil
}

var File_protobuf_osm_proto protoreflect.FileDescriptor

var file_protobuf_osm_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6f, 0x73, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x22, 0x5a,
	0x0a, 0x0a, 0x42, 0x6c, 0x6f, 0x62, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x04, 0x42,
	0x6c, 0x6f, 0x62, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x61, 0x77, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x7a, 0x6c, 0x69, 0x62, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x7a, 0x6c, 0x69, 0x62, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x7a, 0x6d, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x6c, 0x7a, 0x6d, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x13, 0x4f, 0x42,
	0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x62, 0x7a, 0x69, 0x70, 0x32, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54,
	0x45, 0x42, 0x7a, 0x69, 0x70, 0x32, 0x44, 0x61, 0x74, 0x61, 0x22, 0xa5, 0x03, 0x0a, 0x0b, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x04, 0x62, 0x62,
	0x6f, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x42, 0x6f, 0x78, 0x52, 0x04,
	0x62, 0x62, 0x6f, 0x78, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x10, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x42,
	0x0a, 0x1d, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x4d, 0x0a, 0x23, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x20, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x3f, 0x0a, 0x1c, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x69, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x55,
	0x72, 0x6c, 0x22, 0x60, 0x0a, 0x0a, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x42, 0x6f, 0x78,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x12, 0x52, 0x04,
	0x6c, 0x65, 0x66, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x12, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f,
	0x70, 0x18, 0x03, 0x20, 0x02, 0x28, 0x12, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x02, 0x28, 0x12, 0x52, 0x06, 0x62, 0x6f,
	0x74, 0x74, 0x6f, 0x6d, 0x22, 0x1b, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x01,
	0x73, 0x22, 0xa7, 0x02, 0x0a, 0x0e, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x37, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x40, 0x0a,
	0x0e, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x0e, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x25, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x05, 0x3a, 0x03, 0x31, 0x30, 0x30, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x75,
	0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0a, 0x6c, 0x61, 0x74, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x6c,
	0x61, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0a, 0x6c, 0x6f, 0x6e, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x01, 0x30, 0x52,
	0x09, 0x6c, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2f, 0x0a, 0x10, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x05, 0x3a, 0x04, 0x31, 0x30, 0x30, 0x30, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x65,
	0x47, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x22, 0xb7, 0x01, 0x0a, 0x0e,
	0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24,
	0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x64, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x65, 0x6e, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x05, 0x64, 0x65, 0x6e, 0x73, 0x65,
	0x12, 0x21, 0x0a, 0x04, 0x77, 0x61, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x57, 0x61, 0x79, 0x52, 0x04, 0x77,
	0x61, 0x79, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a,
	0x02, 0x2d, 0x31, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x53, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x22,
	0x8e, 0x01, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x12, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18,
	0x07, 0x20, 0x02, 0x28, 0x12, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x02, 0x28, 0x12, 0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x12, 0x16, 0x0a, 0x04, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x04, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x22, 0xa0, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x6e, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x12, 0x42, 0x02, 0x10, 0x01, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x64, 0x65, 0x6e, 0x73, 0x65, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x64, 0x65, 0x6e,
	0x73, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x12, 0x42, 0x02, 0x10, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x03,
	0x6c, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x12, 0x42, 0x02, 0x10, 0x01, 0x52, 0x03, 0x6c,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x01, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x56,
	0x61, 0x6c, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1c, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x05, 0x42, 0x02, 0x10, 0x01, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x12, 0x42, 0x02, 0x10, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x12, 0x42, 0x02, 0x10, 0x01, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x11,
	0x42, 0x02, 0x10, 0x01, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x11, 0x42, 0x02, 0x10, 0x01, 0x52,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x53, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x08, 0x42, 0x02, 0x10, 0x01, 0x52, 0x07, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x03, 0x57, 0x61, 0x79, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01,
	0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x16, 0x0a, 0x04, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x04, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x22,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x0a, 0x04, 0x72, 0x65, 0x66, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x12,
	0x42, 0x02, 0x10, 0x01, 0x52, 0x04, 0x72, 0x65, 0x66, 0x73, 0x22, 0x93, 0x02, 0x0a, 0x08, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12,
	0x16, 0x0a, 0x04, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10,
	0x01, 0x52, 0x04, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x09, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02,
	0x10, 0x01, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x53, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x06,
	0x6d, 0x65, 0x6d, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x12, 0x42, 0x02, 0x10, 0x01,
	0x52, 0x06, 0x6d, 0x65, 0x6d, 0x69, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x02, 0x10, 0x01, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x22, 0x2d, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x41, 0x59,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02,
	0x42, 0x15, 0x5a, 0x13, 0x6d, 0x34, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x70, 0x62, 0x66, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
}

var (
	file_protobuf_osm_proto_rawDescOnce sync.Once
	file_protobuf_osm_proto_rawDescData = file_protobuf_osm_proto_rawDesc
)

func file_protobuf_osm_proto_rawDescGZIP() []byte {
	file_protobuf_osm_proto_rawDescOnce.Do(func() {
		file_protobuf_osm_proto_rawDescData = protoimpl.X.CompressGZIP(file_protobuf_osm_proto_rawDescData)
	})
	return file_protobuf_osm_proto_rawDescData
}

var file_protobuf_osm_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_protobuf_osm_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_protobuf_osm_proto_goTypes = []any{
	(Relation_MemberType)(0), // 0: protobuf.Relation.MemberType
	(*BlobHeader)(nil),       // 1: protobuf.BlobHeader
	(*Blob)(nil),             // 2: protobuf.Blob
	(*HeaderBlock)(nil),      // 3: protobuf.HeaderBlock
	(*HeaderBBox)(nil),       // 4: protobuf.HeaderBBox
	(*StringTable)(nil),      // 5: protobuf.StringTable
	(*PrimitiveBlock)(nil),   // 6: protobuf.PrimitiveBlock
	(*PrimitiveGroup)(nil),   // 7: protobuf.PrimitiveGroup
	(*Info)(nil),             // 8: protobuf.Info
	(*Node)(nil),             // 9: protobuf.Node
	(*DenseNodes)(nil),       // 10: protobuf.DenseNodes
	(*DenseInfo)(nil),        // 11: protobuf.DenseInfo
	(*Way)(nil),              // 12: protobuf.Way
	(*Relation)(nil),         // 13: protobuf.Relation
}
var file_protobuf_osm_proto_depIdxs = []int32{
	4,  // 0: protobuf.HeaderBlock.bbox:type_name -> protobuf.HeaderBBox
	5,  // 1: protobuf.PrimitiveBlock.stringtable:type_name -> protobuf.StringTable
	7,  // 2: protobuf.PrimitiveBlock.primitivegroup:type_name -> protobuf.PrimitiveGroup
	9,  // 3: protobuf.PrimitiveGroup.nodes:type_name -> protobuf.Node
	10, // 4: protobuf.PrimitiveGroup.dense:type_name -> protobuf.DenseNodes
	12, // 5: protobuf.PrimitiveGroup.ways:type_name -> protobuf.Way
	13, // 6: protobuf.PrimitiveGroup.relations:type_name -> protobuf.Relation
	8,  // 7: protobuf.Node.info:type_name -> protobuf.Info
	11, // 8: protobuf.DenseNodes.denseinfo:type_name -> protobuf.DenseInfo
	8,  // 9: protobuf.Way.info:type_name -> protobuf.Info
	8,  // 10: protobuf.Relation.info:type_name -> protobuf.Info
	0,  // 11: protobuf.Relation.types:type_name -> protobuf.Relation.MemberType
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_protobuf_osm_proto_init() }
func file_protobuf_osm_proto_init() {
	if File_protobuf_osm_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protobuf_osm_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protobuf_osm_proto_goTypes,
		DependencyIndexes: file_protobuf_osm_proto_depIdxs,
		EnumInfos:         file_protobuf_osm_proto_enumTypes,
		MessageInfos:      file_protobuf_osm_proto_msgTypes,
	}.Build()
	File_protobuf_osm_proto = out.File
	file_protobuf_osm_proto_rawDesc = nil
	file_protobuf_osm_proto_goTypes = nil
	file_protobuf_osm_proto_depIdxs = nil
}
